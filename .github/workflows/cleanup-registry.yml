name: Cleanup Registry

on:
  # Run daily at 3 AM UTC
  schedule:
    - cron: '0 3 * * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      max_age_days:
        description: 'Maximum age in days for staging images to keep'
        required: false
        type: number
        default: 7
      dry_run:
        description: 'Dry run - show what would be deleted without actually deleting'
        required: false
        type: boolean
        default: false

jobs:
  cleanup-staging-images:
    name: Delete old staging images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Delete old staging images
        uses: snok/container-retention-policy@v3.0.0
        with:
          account: user  # Use "user" for personal accounts
          token: ${{ secrets.GITHUB_TOKEN }}
          image-names: vespera
          image-tags: staging-*  # Target any image that has a tag starting with "staging-"
          cut-off: ${{ github.event.inputs.max_age_days || '7' }}d
          dry-run: ${{ github.event.inputs.dry_run || false }}
      
      - name: Generate cleanup report
        run: |
          DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
          MAX_AGE_DAYS="${{ github.event.inputs.max_age_days || '7' }}"
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # Registry Cleanup Report
          
          ## Cleanup Configuration
          - **Max Age**: ${MAX_AGE_DAYS} days
          - **Mode**: $([ "$DRY_RUN" = "true" ] && echo "Dry Run" || echo "Live Cleanup")
          - **Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          - **Filter**: staging-* tags only
          
          ## Cleanup Actions
          See job logs above for detailed cleanup actions performed by container-retention-policy.
          
          $([ "$DRY_RUN" = "true" ] && echo "**Note**: This was a dry run. No images were actually deleted." || echo "**Note**: Live cleanup was performed.")
          EOF